\documentclass{InsightArticle}

\usepackage[dvips]{graphicx}
\usepackage{color}
\usepackage{listings}

\definecolor{listcomment}{rgb}{0.0,0.5,0.0}
\definecolor{listkeyword}{rgb}{0.0,0.0,0.5}
\definecolor{listnumbers}{gray}{0.65}
\definecolor{listlightgray}{gray}{0.955}
\definecolor{listwhite}{gray}{1.0}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  hyperref should be the last package to be loaded.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage[dvips,
bookmarks,
bookmarksopen,
backref,
colorlinks,linkcolor={blue},citecolor={blue},urlcolor={blue},
]{hyperref}


\title{Iterative Smoothing of Field Data\\ in Spherical Meshes}


% 
% NOTE: This is the last number of the "handle" URL that 
% The Insight Journal assigns to your paper as part of the
% submission process. Please replace the number "1338" with
% the actual handle number that you get assigned.
%
\newcommand{\IJhandlerIDnumber}{3091}

\lstset{frame = tb,
       framerule = 0.25pt,
       float,
       fontadjust,
       backgroundcolor={\color{listlightgray}},
       basicstyle = {\ttfamily\footnotesize},
       keywordstyle = {\ttfamily\color{listkeyword}\textbf},
       identifierstyle = {\ttfamily},
       commentstyle = {\ttfamily\color{listcomment}\textit},
       stringstyle = {\ttfamily},
       showstringspaces = false,
       showtabs = false,
       numbers = left,
       numbersep = 6pt,
       numberstyle={\ttfamily\color{listnumbers}},
       tabsize = 2,
       language=[ANSI]C++,
       floatplacement=!h
       }

\release{1.10}

\author{Luis Ibanez$^{1}$, B. T. Thomas Yeo$^{2}$, Polina Golland$^{2}$}
\authoraddress{$^{1}$Kitware Inc., Clifton Park, NY\\
               $^{2}$CSAIL MIT, Boston, MA}

\begin{document}


%
% Add hyperlink to the web location and license of the paper.
% The argument of this command is the handler identifier given
% by the Insight Journal to this paper.
% 
\IJhandlefooter{\IJhandlerIDnumber}


\ifpdf
\else
   %
   % Commands for including Graphics when using latex
   % 
   \DeclareGraphicsExtensions{.eps,.jpg,.gif,.tiff,.bmp,.png}
   \DeclareGraphicsRule{.jpg}{eps}{.jpg.bb}{`convert #1 eps:-}
   \DeclareGraphicsRule{.gif}{eps}{.gif.bb}{`convert #1 eps:-}
   \DeclareGraphicsRule{.tiff}{eps}{.tiff.bb}{`convert #1 eps:-}
   \DeclareGraphicsRule{.bmp}{eps}{.bmp.bb}{`convert #1 eps:-}
   \DeclareGraphicsRule{.png}{eps}{.png.bb}{`convert #1 eps:-}
\fi


\maketitle


\ifhtml
\chapter*{Front Matter\label{front}}
\fi


\begin{abstract}
\noindent
This document describes a contribution to the Insight Toolkit intended to
smooth the values of Field data associated with the nodes of a Spherical Mesh.
The Mesh Smoothing filters contributed here do not modify the geometry or the
topology of the Mesh. They act only upon the pixel data values associated with
the nodes. Two filters are presented, one that smooths scalar field data, and a
second one that smooths vector field data.

This paper is accompanied with the source code, input data, parameters and
output data that we used for validating the algorithm described in this paper.
This adheres to the fundamental principle that scientific publications must
facilitate \textbf{reproducibility} of the reported results.
\end{abstract}

\tableofcontents

\section{Introduction}

A family of classes has been added recently to the Insight Toolkit for
represented oriented 2D manifolds embedded in a 3D space, objects colloquially
 known as ``Surfaces''. These classes use the QuadEdge representation in order
to ensure the consistency of the orientation all over the surface. 

Most of the filters available for this type of surface representation act upon
the geometry and topology of the Meshes. However, the Meshes are also capable
of carrying data associated with their nodes and therefore there is a need for
filters that process such associated data. The collection of values associated
with every node of a Mesh is usually called a ``Field''. In the Insight Toolkit
we have commonly referred to it as ``PixelData'' which is a bit less intuitive
but more software-oriented.  Following the first terminology, in this report we
refer to the point data as a ``Field''. This terminology is used in the
Visualization Toolkit \textbf{VTK} as well.

In this paper we contribute new classes that can be used for smoothing the
values of field data over the surface of the Mesh. The Field data can be Scalar
or Vector. Specific smoothing filters are provided for each case.

This paper is the second on a series related to implementing support for
deformable registration of Meshes according the method described in
\cite{Yeo2008,Yeo2010}.  This reference also provide a detailed description of
the algorithm implemented here. This report will focus on the software
implementation and its usage.

\section{Overview}

The filters described in this report operate on the Field data, or Pixel Data,
of a Mesh. The Meshes are expected to be of type \doxygen{QuadEdgeMesh}.

\subsection{Algorithm}

The basic algorithm implemented in these classes is described in
\cite{Yeo2008,Yeo2010}.  In summary the process involve visiting all the node
of the Mesh, and for each one of them, computing a new scalar value by using a
weighted average of the scalar values of the immediate neighbors.

\subsubsection{Weighted Average}

A simply scheme of two-weights is used.  The weight associated to the central
value is:

\begin{equation}
\frac{ 1 }{ 1 + \left| N_i \right|  \exp{ \left( -\frac{1}{2\lambda} \right) } }
\end{equation}

While of the neighbors values will use weights equal to

\begin{equation}
\frac{  \exp{ \left( -\frac{1}{2\lambda} \right) } }
{ 1 + \left| N_i \right| \exp{ \left( -\frac{1}{2\lambda} \right) } }
\end{equation}

Where $N_i$ is the number of neighbors of this i-th node, and $\lambda$ is a
user-provided constant that applies to the entire mesh.

This process of local weighted average is applied on all the nodes and this is
done in iteratively until reaching a use-provided number of iterations.  The
effect of the $\lambda$ parameter is such that the field data is smoothed more
when the values of $\lambda$ are large. Typical values of $\lambda$ are in the
range $[0.10,10.0]$, although they are not restricted to that range at all.

As an illustration, Table\ref{tab:LambdaValueEffect} presents the weight values
of the central node and its neighbors for different values of $\lambda$, on the
typical case of a neighborhood of six nodes.

\begin{table}
\begin{center}
\begin{tabular}{|c|c|c|}
\hline
$\lambda$ & Neighbor Weight & Central Weight \\
\hline
\hline
0.03125 & 0.00000 & 1.00000 \\
\hline
0.06250 & 0.00033 & 0.99799 \\
\hline
0.12500 & 0.01650 & 0.90099 \\
\hline
0.25000 & 0.07469 & 0.55187 \\
\hline
0.50000 & 0.11470 & 0.31179 \\
\hline
1.00000 & 0.13074 & 0.21556 \\
\hline
2.00000 & 0.13729 & 0.17628 \\
\hline
4.00000 & 0.14019 & 0.15886 \\
\hline
8.00000 & 0.14155 & 0.15068 \\
\hline
\end{tabular}
\end{center}
\itkcaption[Effect of Lambda]{Effect on Lambda on the weights used for
computing the weighted-average of neighbors in a node with six neighbors.
\label{tab:LambdaValueEffect}}
\end{table}

As the table shows, for small values of $\lambda$, for example, less than
$0.1$, the weight of the central pixels dominates the computation, and
therefore a subtle smoothing is applied. On the other hand, for values of
$\lambda$ above $10.0$ the weights of central value is almost the same as the
weight of any of the neighbors which make the filter behave as a iterative
average filter and produce a stronger smoothing effect.


\subsubsection{Iterations}

The smoothing filter does not have a stopping criteria based on convergence. It
simply runs as many iterations as specified by the user. It is the user's
responsibility to choose how many iterations must be run.


\subsection{Smoothing Scalars}

Smoothing of Meshes with a Scalars field is implemented in the filter

\begin{center}
\code{itk::QuadEdgeMeshScalarPixelValuesSmoothingFilter}
\end{center}

This filter is suitable for a \code{QuadEdgeMesh} whose \code{PixelType} has a
single component. Typical examples will use \code{float} or \code{double} as
pixel types.

The global use of the filter requires the user to

\begin{itemize}
\item Connect an input \code{QuadEdgeMesh} of Pixel Scalar type
\item Set the values of the $\lambda$ parameter
\item Set the number of iterations.
\end{itemize}


\subsection{Smoothing Vectors}

Smoothing of Meshes with a Vector field is implemented in the filter

\begin{center}
\code{itk::QuadEdgeMeshVectorPixelValuesSmoothingFilter}
\end{center}

This filter is suitable for a \code{QuadEdgeMesh} whose \code{PixelType} has a
exactly three component. The geometrical implementation of the smoothing
process is very specific to Vectors and will not be appropriate for arbitrary
arrays that are not representing a geometrical Vector in space. For example,
this method will not be appropriate for a Mesh whose pixel data are RGB color
triplets.

The particularity of this filter is that before the weighted average of the
Vectors is computed, each one of the vectors from neighbor nodes is
parallel-transported to the central node. The reason for doing this is that
vectors located at different points in the mesh are not comparable specially
when the mesh has non-zero curvature. The process of Parallel-Transform is
performed under the assumption that the surface has a Spherical geometry.
Therefore, this filter is only appropriate for Spherical surfaces.

Parallel Transport from point $p_1$ to point $p_2$ of the surface is
implemented by sliding the Vector along the greatest circle that connects
points $p_1$ and $p_2$. The filter expects the user to provide the coordinates
of the Sphere center as well as its radius. No verification if performed on
these values.

In summary, in order to use this filter, the user should 

\begin{itemize}
\item Connect an input \code{QuadEdgeMesh} of Vector Scalar type
\item Set the values of the $\lambda$ parameter
\item Set the number of iterations.
\item Set the coordinates of the Sphere center
\item Set the Sphere radius
\end{itemize}


\section{How to Build}

This contribution includes

\begin{itemize}
\item Source code of the Scalar and Vector Mesh smoothing filters
\item Source code of a Mesh Writer (to .vtk legacy format)
\item Tests for the filters and the writer
\item Examples on how to smooth a Scalar Mesh and a Vector Mesh
\item All the LaTeX source files of this paper
\end{itemize}

\subsection{Building Executables and Tests}

In order to build the whole, it is enough to configure the directory with
CMake. As usual, an out-of-source build is the recommended method.

In a Linux environment it should be enough to do the following:

\begin{itemize}
\item \code{ccmake QuadEdgeMeshFieldSmoothingFiltersSourceDirectory}
\item \code{make}
\item \code{ctest}
\end{itemize}

This will configure the project, build the executables, and run the tests and
examples. 


\subsection{Building this Report}

Once the tests and examples run, the images shown in this report can be
generated by doing:

\begin{itemize}
\item \code{ccmake QuadEdgeMeshFieldSmoothingFiltersSourceDirectory}
\item Turn ON the CMake variables
\begin{itemize}
\item \code{USE\_VTK}
\item \code{GENERATE\_PAPER\_SCREENSHOTS}
\end{itemize}
\item \code{make}
\item \code{ctest}
\end{itemize}

This run of ctest will generate a collection of screen shots that will be saved
as PNG files in the \code{Testing/Temporary} subdirectory. 

Finally, in order to build this report you can do

\begin{itemize}
\item \code{ccmake QuadEdgeMeshFieldSmoothingFiltersSourceDirectory}
\item Turn ON the CMake variable
\begin{itemize}
\item \code{GENERATE\_REPORT}
\end{itemize}
\item \code{make}
\end{itemize}

This should produce a PDF file in the binary directory, under the subdirectory
\code{Documents/Report001}.

\section{How to Use the Filters}

This section illustrates the minimum operations required for running these two
filters. The code shown here is available in the Examples directory of the code
that accompanies this paper. You can download the entire set of files from the
Insight Journal web site.

\subsection{Scalar Mesh}

\subsubsection{Source Code Example}

In order to use this filter we should start by including headers for the
smoothing filter, the reader and writer types and the \doxygen{QuadEdgeMesh}
itself.

\begin{center}
\lstinputlisting[linerange={21-24}]{../../Examples/SmoothingMeshWithScalars.cxx}
\end{center}

Then we declare the specific instantiations of each one of these types. Note that the
pixel type used for the QuadEdgeMesh is a scalar type in this case.

\begin{center}
\lstinputlisting[linerange={36-40}]{../../Examples/SmoothingMeshWithScalars.cxx}
\end{center}

We declare the type of the smoothing filter, and construct and instance of it. 

\begin{center}
\lstinputlisting[linerange={48-51}]{../../Examples/SmoothingMeshWithScalars.cxx}
\end{center}

Then we set its parameters: lambda and number of iterations.

\begin{center}
\lstinputlisting[linerange={53-57}]{../../Examples/SmoothingMeshWithScalars.cxx}
\end{center}

Typical pipeline connections are set by calling SetInput() and GetOutput() methods.
In this case we simply read the mesh and write its smoothed version.

\begin{center}
\lstinputlisting[linerange={63-66}]{../../Examples/SmoothingMeshWithScalars.cxx}
\end{center}

\subsubsection{How to Run}

The Subdirectory \code{Examples} contain the source file 

\begin{itemize}
\item SmoothingMeshWithScalars.cxx
\end{itemize}

When building the project this file generates an executable called

\begin{itemize}
\item SmoothingMeshWithScalars
\end{itemize}

This executable expects the following four command line arguments

\begin{enumerate}
\item InputMeshFileName (.vtk legacy format)
\item OutputMeshFileName (.vtk legacy format)
\item lambda (real value)
\item numberOfIterations (integer value)
\end{enumerate}

The results in the following section were generated with calls similar to

\begin{verbatim}
SmoothingMeshWithScalars meshWithScalarsIC1.vtk  smoothed.vtk 2.0  5
\end{verbatim}

Which means that a value of lambda equals to 2.0 was used along a number of
iterations equal to five.

\subsubsection{Results}

The diagram in Figure~\ref{fig:ScalarIC1Smoothings} presents the results of
running the smoothing filters for multiple values of lambda and multiple
iterations on a surface generated from the Icosahedron after one subdivision
(IC1).

The diagram in Figure~\ref{fig:ScalarIC4Smoothings} presents the results of
running the smoothing filters for multiple values of lambda and multiple
iterations on a surface generated from the Icosahedron after four subdivision
(IC4).

In both cases, the initial surface has all its point values set to zero except
for a single node that is set to the value 10.0.

\begin{figure}
\center
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC1_02_1.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC1_04_1.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC1_08_1.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC1_10_1.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC1_20_1.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC1_40_1.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC1_02_2.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC1_04_2.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC1_08_2.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC1_10_2.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC1_20_2.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC1_40_2.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC1_02_5.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC1_04_5.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC1_08_5.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC1_10_5.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC1_20_5.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC1_40_5.png}
\itkcaption[Scalar IC1 Smoothings]{Results of running the Smoothing filter in
an IC1 surface for multiple values of lambda and number of iterations. From
left to right each column was executed with lambda values 0.2, 0.4, 0.8, 1.0,
2.0 and 4.0 respectively. From top to bottom each row was executed with a
number of iterations equal to 1,2 and 5 respectively.}
\label{fig:ScalarIC1Smoothings}
\end{figure}

\begin{figure}
\center
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC4_02_1.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC4_04_1.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC4_08_1.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC4_10_1.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC4_20_1.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC4_40_1.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC4_02_2.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC4_04_2.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC4_08_2.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC4_10_2.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC4_20_2.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC4_40_2.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC4_02_5.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC4_04_5.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC4_08_5.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC4_10_5.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC4_20_5.png}
\includegraphics[width=0.15\textwidth]{meshWithScalarsIC4_40_5.png}
\itkcaption[Scalar IC4 Smoothings]{Results of running the Smoothing filter in
an IC4 surface for multiple values of lambda and number of iterations. From
left to right each column was executed with lambda values 0.2, 0.4, 0.8, 1.0,
2.0 and 4.0 respectively. From top to bottom each row was executed with a
number of iterations equal to 1,2 and 5 respectively.}
\label{fig:ScalarIC4Smoothings}
\end{figure}

\clearpage

\subsection{Vector Mesh}

\subsubsection{Source Code Example}

In order to use this filter we should start by including headers for the
smoothing filter, the reader and writer types and the \doxygen{QuadEdgeMesh}
itself.  Note that a different version of the PolyData writer class is needed
here in order to manage writing of meshes whose pixel types are vectors.

\begin{center}
\lstinputlisting[linerange={21-24}]{../../Examples/SmoothingMeshWithVectors.cxx}
\end{center}

Then we declare the specific instantiations of each one of these types. Note
that the pixel type used for the QuadEdgeMesh is a Vector type in this case.
The \doxygen{Vector} class has a very specific meaning in ITK. It is the class
that represents the Geometrical concept of the subtraction between to points in
space. This is particularly important for the operation of parallel transport
that is performed internally as part of the execution of this smoothing filter.

\begin{center}
\lstinputlisting[linerange={36-40}]{../../Examples/SmoothingMeshWithVectors.cxx}
\end{center}

We declare the type of the smoothing filter, and construct and instance of it. 

\begin{center}
\lstinputlisting[linerange={42-45}]{../../Examples/SmoothingMeshWithVectors.cxx}
\end{center}

The filter expects an input surface with a spherical geometry. The user must
provide the center and radius of this spherical mesh surface by calling the
methods \code{SetSphereCenter()} and \code{SetSphereRadius()}. \footnote{
\textbf{Implementation Note:} This filter could have computed and estimation of
the radius and the location of the sphere center, but such estimation would
require a non-negligible amount of computation time. It may still be desirable
to have such implementation as one possible mode of operation for the filter.}

\begin{center}
\lstinputlisting[linerange={53-57}]{../../Examples/SmoothingMeshWithVectors.cxx}
\end{center}

Then we set its parameters: lambda and number of iterations.

\begin{center}
\lstinputlisting[linerange={60-64}]{../../Examples/SmoothingMeshWithVectors.cxx}
\end{center}

The type of the mesh writer that is capable of managing vectors as point data, is 
defined and one instance is created.

\begin{center}
\lstinputlisting[linerange={66-69}]{../../Examples/SmoothingMeshWithVectors.cxx}
\end{center}

Typical pipeline connections are set by calling SetInput() and GetOutput() methods.
In this case we simply read the mesh and write its smoothed version.

\begin{center}
\lstinputlisting[linerange={71-72}]{../../Examples/SmoothingMeshWithVectors.cxx}
\end{center}

and the execution of the pipeline is triggered by calling the \code{Update()} method 
on the filter at the end of the pipeline. In this case, the writer.

\begin{center}
\lstinputlisting[linerange={76-84}]{../../Examples/SmoothingMeshWithVectors.cxx}
\end{center}


\subsubsection{How to Run}

The Subdirectory \code{Examples} contain the source file 

\begin{itemize}
\item SmoothingMeshWithVectors.cxx
\end{itemize}

When building the project this file generates an executable called

\begin{itemize}
\item SmoothingMeshWithVectors
\end{itemize}

This executable expects the following four command line arguments

\begin{enumerate}
\item InputMeshFileName (.vtk legacy format)
\item OutputMeshFileName (.vtk legacy format)
\item lambda (real value)
\item numberOfIterations (integer value)
\end{enumerate}

The results in the following section were generated with calls similar to

\begin{verbatim}
SmoothingMeshWithVectors meshWithVectorsIC1.vtk  smoothed.vtk 2.0  5
\end{verbatim}

Which means that a value of lambda equals to 2.0 was used along a number of
iterations equal to five.

\subsubsection{Results}

The diagram in Figure~\ref{fig:VectorIC1Smoothings} presents the results of
running the smoothing filters for multiple values of lambda and multiple
iterations on a surface generated from the Icosahedron after one subdivision
(IC1).

The diagram in Figure~\ref{fig:VectorIC4Smoothings} presents the results of
running the smoothing filters for multiple values of lambda and multiple
iterations on a surface generated from the Icosahedron after four subdivision
(IC4).

In both cases, the initial surface has all its point values set to Vectors of
three components, with all their components set to zero, except for a single
node that has an axis aligned vector with a magnitude equal to 10. The radius
of the sphere is equal to 100.0, and it is centered at the origin of
coordinates. The figures show how the smoothing filter propagates the Vector
across the surface, producing smaller vectors that are parallel-transported
from the original single non-null vector.

Figure~\ref{fig:VectorIC4StrongSmoothings} presents the results of running the
Vector smoothing for a lambda value of 1.0, and longer number of iterations. In
this figure we can observe how the vectors are parallel-transported as their
values propagate to neighbor nodes through the iterations of the filter.

\clearpage

\begin{figure}
\center
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC1_02_1.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC1_04_1.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC1_08_1.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC1_10_1.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC1_20_1.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC1_40_1.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC1_02_2.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC1_04_2.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC1_08_2.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC1_10_2.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC1_20_2.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC1_40_2.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC1_02_5.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC1_04_5.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC1_08_5.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC1_10_5.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC1_20_5.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC1_40_5.png}
\itkcaption[Vector IC1 Smoothings]{Results of running the Smoothing filter in
an IC1 surface for multiple values of lambda and number of iterations. From
left to right each column was executed with lambda values 0.2, 0.4, 0.8, 1.0,
2.0 and 4.0 respectively. From top to bottom each row was executed with a
number of iterations equal to 1,2 and 5 respectively.}
\label{fig:VectorIC1Smoothings}
\end{figure}

\begin{figure}
\center
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC4_02_1.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC4_04_1.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC4_08_1.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC4_10_1.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC4_20_1.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC4_40_1.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC4_02_2.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC4_04_2.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC4_08_2.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC4_10_2.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC4_20_2.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC4_40_2.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC4_02_5.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC4_04_5.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC4_08_5.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC4_10_5.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC4_20_5.png}
\includegraphics[width=0.15\textwidth]{meshWithVectorsIC4_40_5.png}
\itkcaption[Vector IC4 Smoothings]{Results of running the Smoothing filter in
an IC4 surface for multiple values of lambda and number of iterations. From
left to right each column was executed with lambda values 0.2, 0.4, 0.8, 1.0,
2.0 and 4.0 respectively. From top to bottom each row was executed with a
number of iterations equal to 1,2 and 5 respectively.}
\label{fig:VectorIC4Smoothings}
\end{figure}

\clearpage

\begin{figure}
\center
\includegraphics[width=0.32\textwidth]{meshWithVectorsIC4_10_20.png}
\includegraphics[width=0.32\textwidth]{meshWithVectorsIC4_10_40.png}
\includegraphics[width=0.32\textwidth]{meshWithVectorsIC4_10_80.png}
\itkcaption[Vector IC4 Strong Smoothings]{Results of running the Smoothing
filter in an IC4 surface for a lambda value of 1.0 and number of iterations
(from left to right): 20, 40 and 80. The vectors are scaled by a factor of x400
to make them visible.}
\label{fig:VectorIC4StrongSmoothings}
\end{figure}





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  Insert the bibliography using BibTeX
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\bibliographystyle{plain}
\bibliography{InsightJournal}


\end{document}
